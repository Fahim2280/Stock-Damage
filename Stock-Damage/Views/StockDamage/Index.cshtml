@model Stock_Damage.DTOs.StockDamageViewModel
@{
    ViewData["Title"] = "Stock Damage Entry";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-danger text-white">
                    <h4 class="mb-0"><i class="fas fa-exclamation-triangle"></i> Stock Damage Entry</h4>
                </div>
                <div class="card-body">
                    <form id="stockDamageForm">
                        <div class="row">
                            <!-- Warehouse Name -->
                            <div class="col-md-4 mb-3">
                                <label for="godownSelect" class="form-label">Warehouse Name <span class="text-danger">*</span></label>
                                <select class="form-select" id="godownSelect" required>
                                    <option value="">-- Select Warehouse --</option>
                                    @foreach (var godown in Model.Godowns)
                                    {
                                        <option value="@godown.GodownNo" data-name="@godown.GodownName">@godown.GodownName</option>
                                    }
                                </select>
                            </div>

                            <!-- Item Name -->
                            <div class="col-md-4 mb-3">
                                <label for="itemSelect" class="form-label">Item Name <span class="text-danger">*</span></label>
                                <select class="form-select" id="itemSelect" required>
                                    <option value="">-- Select Item --</option>
                                    @foreach (var item in Model.Items)
                                    {
                                        <option value="@item.SubItemCode" data-name="@item.SubItemName" data-unit="@item.Unit">@item.SubItemName</option>
                                    }
                                </select>
                            </div>

                            <!-- Item Code -->
                            <div class="col-md-4 mb-3">
                                <label for="itemCode" class="form-label">Item Code</label>
                                <input type="text" class="form-control" id="itemCode" readonly>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Unit -->
                            <div class="col-md-3 mb-3">
                                <label for="unit" class="form-label">Unit</label>
                                <input type="text" class="form-control" id="unit" readonly>
                            </div>

                            <!-- Stock -->
                            <div class="col-md-3 mb-3">
                                <label for="stock" class="form-label">Current Stock</label>
                                <input type="text" class="form-control" id="stock" readonly>
                            </div>

                            <!-- Batch No -->
                            <div class="col-md-3 mb-3">
                                <label for="batchNo" class="form-label">Batch No</label>
                                <input type="text" class="form-control" id="batchNo" value="NA" readonly>
                            </div>

                            <!-- Currency -->
                            <div class="col-md-3 mb-3">
                                <label for="currencySelect" class="form-label">Currency <span class="text-danger">*</span></label>
                                <select class="form-select" id="currencySelect" required>
                                    <option value="">-- Select Currency --</option>
                                    @foreach (var currency in Model.Currencies)
                                    {
                                        <option value="@currency.CurrencyName" data-rate="@currency.ConversionRate">@currency.CurrencyName</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Exchange Rate -->
                            <div class="col-md-3 mb-3">
                                <label for="exchangeRate" class="form-label">Exchange Rate</label>
                                <input type="number" class="form-control" id="exchangeRate" step="0.0001" readonly>
                            </div>

                            <!-- Quantity -->
                            <div class="col-md-3 mb-3">
                                <label for="quantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="quantity" step="0.01" min="0.01" required>
                            </div>

                            <!-- Rate -->
                            <div class="col-md-3 mb-3">
                                <label for="rate" class="form-label">Rate <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="rate" step="0.01" min="0.01" required>
                            </div>

                            <!-- Amount In -->
                            <div class="col-md-3 mb-3">
                                <label for="amountIn" class="form-label">Amount In</label>
                                <input type="number" class="form-control" id="amountIn" step="0.01" readonly>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Dr A/C Head -->
                            <div class="col-md-4 mb-3">
                                <label for="drAcHead" class="form-label">Dr A/C Head</label>
                                <input type="text" class="form-control" id="drAcHead" value="Stock Damage" readonly>
                            </div>

                            <!-- Employee Name -->
                            <div class="col-md-4 mb-3">
                                <label for="employeeSelect" class="form-label">Employee Name <span class="text-danger">*</span></label>
                                <select class="form-select" id="employeeSelect" required>
                                    <option value="">-- Select Employee --</option>
                                    @foreach (var employee in Model.Employees)
                                    {
                                        <option value="@employee.EmployeeName">@employee.EmployeeName</option>
                                    }
                                </select>
                            </div>

                            <!-- Comments -->
                            <div class="col-md-4 mb-3">
                                <label for="comments" class="form-label">Comments</label>
                                <textarea class="form-control" id="comments" rows="1"></textarea>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <button type="button" class="btn btn-primary" id="addBtn">
                                    <i class="fas fa-plus"></i> Add to List
                                </button>
                                <button type="button" class="btn btn-success" id="saveBtn">
                                    <i class="fas fa-save"></i> Save All
                                </button>
                                <button type="button" class="btn btn-secondary" id="clearBtn">
                                    <i class="fas fa-eraser"></i> Clear Form
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Temporary Table for Added Entries -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="fas fa-list"></i> Stock Damage Entries</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover" id="entriesTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>#</th>
                                    <th>Warehouse</th>
                                    <th>Item Name</th>
                                    <th>Item Code</th>
                                    <th>Unit</th>
                                    <th>Stock</th>
                                    <th>Batch No</th>
                                    <th>Quantity</th>
                                    <th>Rate</th>
                                    <th>Amount</th>
                                    <th>Currency</th>
                                    <th>Employee</th>
                                    <th>Comments</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="entriesTableBody">
                                <tr id="noDataRow">
                                    <td colspan="14" class="text-center text-muted">No entries added yet</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let entries = [];
            let rowCounter = 0;

            // Calculate Amount when Quantity or Rate changes
            $('#quantity, #rate').on('input', function () {
                calculateAmount();
            });

            function calculateAmount() {
                const quantity = parseFloat($('#quantity').val()) || 0;
                const rate = parseFloat($('#rate').val()) || 0;
                const amount = quantity * rate;
                $('#amountIn').val(amount.toFixed(2));
            }

            // When Item is selected, fetch item details
            $('#itemSelect').on('change', function () {
                const subItemCode = $(this).val();

                if (subItemCode) {
                    $('#itemCode').val(subItemCode);
                    const unit = $(this).find(':selected').data('unit');
                    $('#unit').val(unit);

                    // Fetch stock quantity
                    $.ajax({
                        url: '@Url.Action("GetItemDetails", "StockDamage")',
                        type: 'GET',
                        data: { subItemCode: subItemCode },
                        success: function (response) {
                            if (response.success) {
                                $('#stock').val(response.data.stockQuantity);
                            } else {
                                $('#stock').val('0');
                            }
                        },
                        error: function () {
                            alert('Error fetching item details');
                            $('#stock').val('0');
                        }
                    });
                } else {
                    $('#itemCode').val('');
                    $('#unit').val('');
                    $('#stock').val('');
                }
            });

            // When Currency is selected, display conversion rate
            $('#currencySelect').on('change', function () {
                const rate = $(this).find(':selected').data('rate');
                $('#exchangeRate').val(rate || '');
            });

            // Add button click
            $('#addBtn').on('click', function () {
                if (!validateForm()) {
                    return;
                }

                const entry = {
                    GodownNo: $('#godownSelect').val(),
                    GodownName: $('#godownSelect').find(':selected').data('name'),
                    SubItemCode: $('#itemCode').val(),
                    SubItemName: $('#itemSelect').find(':selected').data('name'),
                    Unit: $('#unit').val(),
                    Stock: parseFloat($('#stock').val()) || 0,
                    BatchNo: $('#batchNo').val(),
                    Quantity: parseFloat($('#quantity').val()),
                    Rate: parseFloat($('#rate').val()),
                    AmountIn: parseFloat($('#amountIn').val()),
                    CurrencyName: $('#currencySelect').val(),
                    ConversionRate: parseFloat($('#exchangeRate').val()),
                    DrAcHead: $('#drAcHead').val(),
                    EmployeeName: $('#employeeSelect').val(),
                    Comments: $('#comments').val()
                };

                entries.push(entry);
                addRowToTable(entry);
                clearForm();
                $('#saveBtn').prop('disabled', false);
            });

            function validateForm() {
                if (!$('#godownSelect').val()) {
                    alert('Please select a warehouse');
                    $('#godownSelect').focus();
                    return false;
                }
                if (!$('#itemSelect').val()) {
                    alert('Please select an item');
                    $('#itemSelect').focus();
                    return false;
                }
                if (!$('#currencySelect').val()) {
                    alert('Please select a currency');
                    $('#currencySelect').focus();
                    return false;
                }
                if (!$('#employeeSelect').val()) {
                    alert('Please select an employee');
                    $('#employeeSelect').focus();
                    return false;
                }
                const quantity = parseFloat($('#quantity').val());
                if (!quantity || quantity <= 0) {
                    alert('Please enter a valid quantity greater than 0');
                    $('#quantity').focus();
                    return false;
                }
                const rate = parseFloat($('#rate').val());
                if (!rate || rate <= 0) {
                    alert('Please enter a valid rate greater than 0');
                    $('#rate').focus();
                    return false;
                }
                return true;
            }

            function addRowToTable(entry) {
                $('#noDataRow').hide();
                rowCounter++;

                const row = `
                    <tr data-index="${entries.length - 1}">
                        <td>${rowCounter}</td>
                        <td>${entry.GodownName}</td>
                        <td>${entry.SubItemName}</td>
                        <td>${entry.SubItemCode}</td>
                        <td>${entry.Unit}</td>
                        <td>${entry.Stock.toFixed(2)}</td>
                        <td>${entry.BatchNo}</td>
                        <td>${entry.Quantity.toFixed(2)}</td>
                        <td>${entry.Rate.toFixed(2)}</td>
                        <td>${entry.AmountIn.toFixed(2)}</td>
                        <td>${entry.CurrencyName}</td>
                        <td>${entry.EmployeeName}</td>
                        <td>${entry.Comments || '-'}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger deleteBtn" data-index="${entries.length - 1}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;

                $('#entriesTableBody').append(row);
            }

            // Delete row
            $(document).on('click', '.deleteBtn', function () {
                if (!confirm('Are you sure you want to delete this entry?')) {
                    return;
                }

                const index = $(this).data('index');
                entries.splice(index, 1);
                $(this).closest('tr').remove();

                // Re-index rows
                $('#entriesTableBody tr').each(function (i) {
                    if (!$(this).attr('id')) {
                        $(this).find('td:first').text(i + 1);
                        $(this).attr('data-index', i);
                        $(this).find('.deleteBtn').attr('data-index', i);
                    }
                });

                if (entries.length === 0) {
                    $('#noDataRow').show();
                    $('#saveBtn').prop('disabled', true);
                    rowCounter = 0;
                }
            });

            // Clear form
            $('#clearBtn').on('click', function () {
                clearForm();
            });

            function clearForm() {
                $('#godownSelect').val('');
                $('#itemSelect').val('');
                $('#itemCode').val('');
                $('#unit').val('');
                $('#stock').val('');
                $('#quantity').val('');
                $('#rate').val('');
                $('#amountIn').val('');
                $('#currencySelect').val('');
                $('#exchangeRate').val('');
                $('#employeeSelect').val('');
                $('#comments').val('');
                $('#godownSelect').focus();
            }

            // Save all entries
            $('#saveBtn').on('click', function () {
                if (entries.length === 0) {
                    alert('No entries to save');
                    return;
                }

                if (!confirm(`Are you sure you want to save ${entries.length} entries?`)) {
                    return;
                }

                const saveBtn = $(this);
                saveBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Saving...');

                $.ajax({
                    url: '@Url.Action("SaveStockDamage", "StockDamage")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(entries),
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            // Clear all entries
                            entries = [];
                            $('#entriesTableBody').empty();
                            $('#noDataRow').show();
                            rowCounter = 0;
                        } else {
                            alert('Error: ' + response.message);
                            saveBtn.prop('disabled', false);
                        }
                        saveBtn.html('<i class="fas fa-save"></i> Save All');
                    },
                    error: function (xhr) {
                        const errorMsg = xhr.responseJSON?.message || 'An error occurred while saving';
                        alert('Error: ' + errorMsg);
                        saveBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Save All');
                    }
                });
            });
        });
    </script>
}