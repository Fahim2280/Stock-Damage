@model Stock_Damage.DTOs.StockDamageViewModel
@{
    ViewData["Title"] = "Stock Damage";
}

<div class="bg-light">
    <!-- Header -->
    <div class="bg-secondary text-white d-flex justify-content-between align-items-center px-3 py-2" style="font-size: 14px;">
        <span>Stock Damage</span>
        <div>
            <i class="fas fa-window-minimize me-2"></i>
            <i class="fas fa-window-maximize me-2"></i>
            <i class="fas fa-times"></i>
        </div>
    </div>

    <!-- Form Section -->
    <div class="bg-white p-3">
        <form id="stockDamageForm">
            <div class="row g-2">
                <!-- Left Column -->
                <div class="col-md-6">
                    <!-- Date -->
                    <div class="mb-2">
                        <label for="dateInput" class="form-label small mb-1">Date</label>
                        <div class="input-group input-group-sm" style="max-width: 200px;">
                            <input type="date" class="form-control form-control-sm" id="dateInput" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                        </div>
                    </div>

                    <!-- Voucher No -->
                    <div class="mb-2">
                        <label for="voucherNo" class="form-label small mb-1">Voucher No</label>
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control form-control-sm bg-light" id="voucherNo" placeholder="Auto generated Voucher Number" readonly>
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                        </div>
                    </div>

                    <!-- Warehouse Name -->
                    <div class="mb-2">
                        <label for="godownSelect" class="form-label small mb-1">Warehouse Name</label>
                        <select class="form-select form-select-sm" id="godownSelect">
                            <option value=""></option>
                            @foreach (var godown in Model.Godowns)
                            {
                                <option value="@godown.GodownNo" data-name="@godown.GodownName">@godown.GodownName</option>
                            }
                        </select>
                    </div>

                    <!-- Item Name -->
                    <div class="mb-2">
                        <label for="itemSelect" class="form-label small mb-1">Item Name</label>
                        <select class="form-select form-select-sm" id="itemSelect">
                            <option value=""></option>
                            @foreach (var item in Model.Items)
                            {
                                <option value="@item.SubItemCode" data-name="@item.SubItemName" data-unit="@item.Unit">@item.SubItemName</option>
                            }
                        </select>
                    </div>

                    <!-- Item Code and Unit Row -->
                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label for="itemCode" class="form-label small mb-1">Item Code</label>
                            <input type="text" class="form-control form-control-sm bg-light" id="itemCode" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="unit" class="form-label small mb-1">Unit</label>
                            <input type="text" class="form-control form-control-sm bg-light" id="unit" readonly>
                        </div>
                    </div>

                    <!-- Batch No and Stock Row -->
                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label for="batchNo" class="form-label small mb-1">Batch No</label>
                            <select class="form-select form-select-sm" id="batchNo">
                                <option value="Stock">Stock</option>
                                <option value="NA">NA</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="stock" class="form-label small mb-1">Stock</label>
                            <input type="text" class="form-control form-control-sm bg-light" id="stock" readonly>
                        </div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="col-md-6">
                    <!-- Currency -->
                    <div class="mb-2">
                        <label for="currencySelect" class="form-label small mb-1">Currency</label>
                        <select class="form-select form-select-sm" id="currencySelect">
                            <option value=""></option>
                            @foreach (var currency in Model.Currencies)
                            {
                                <option value="@currency.CurrencyName" data-rate="@currency.ConversionRate">@currency.CurrencyName</option>
                            }
                        </select>
                    </div>

                    <!-- Quantity and Rate Row -->
                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label for="quantity" class="form-label small mb-1">Quantity</label>
                            <input type="number" class="form-control form-control-sm" id="quantity" step="0.01" min="0.01">
                        </div>
                        <div class="col-md-6">
                            <label for="rate" class="form-label small mb-1">Rate</label>
                            <input type="number" class="form-control form-control-sm" id="rate" step="0.01" min="0.01">
                        </div>
                    </div>

                    <!-- Amount In -->
                    <div class="mb-2">
                        <label for="amountIn" class="form-label small mb-1">Amount In</label>
                        <input type="text" class="form-control form-control-sm bg-light" id="amountIn" value="0.00" readonly>
                    </div>

                    <!-- Exchange Rate and Total Amount Row -->
                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label for="exchangeRate" class="form-label small mb-1">Exchange Rate(in BDT)</label>
                            <input type="text" class="form-control form-control-sm bg-light" id="exchangeRate" value="0.00" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="totalAmount" class="form-label small mb-1">Total Amount</label>
                            <input type="text" class="form-control form-control-sm bg-light" id="totalAmount" value="0.00" readonly>
                        </div>
                    </div>

                    <!-- Dr A/C Head -->
                    <div class="mb-2">
                        <label for="drAcHead" class="form-label small mb-1">Dr A/C Head</label>
                        <select class="form-select form-select-sm" id="drAcHead">
                            <option value="Stock Damage" selected>Stock Damage</option>
                        </select>
                    </div>

                    <!-- Employee Name -->
                    <div class="mb-2">
                        <label for="employeeSelect" class="form-label small mb-1">Employee Name</label>
                        <select class="form-select form-select-sm" id="employeeSelect">
                            <option value=""></option>
                            @foreach (var employee in Model.Employees)
                            {
                                <option value="@employee.EmployeeName">@employee.EmployeeName</option>
                            }
                        </select>
                    </div>

                    <!-- Comments -->
                    <div class="mb-2">
                        <label for="comments" class="form-label small mb-1">Comments</label>
                        <textarea class="form-control form-control-sm" id="comments" rows="2"></textarea>
                    </div>
                </div>
            </div>

            <!-- Add Button -->
            <div class="row mt-2">
                <div class="col-12">
                    <button type="button" class="btn btn-sm btn-light border" id="addBtn">
                        <i class="fas fa-plus"></i> Add
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- Table Section -->
    <div class="bg-white border mt-0">
        <div class="table-responsive">
            <table class="table table-sm table-bordered mb-0 small">
                <thead class="table-light">
                    <tr>
                        <th style="width: 40px;">SL#</th>
                        <th style="width: 150px;">Warehouse Name</th>
                        <th style="width: 200px;">Item Name</th>
                        <th style="width: 120px;">Item Code</th>
                        <th style="width: 100px;">Batch No</th>
                        <th style="width: 100px;">Currency</th>
                        <th style="width: 100px;">Quantity</th>
                        <th style="width: 100px;">Rate</th>
                        <th style="width: 130px;">Amount (In BDT)</th>
                        <th style="width: 150px;">Exchange Rate (In BDT)</th>
                        <th style="width: 130px;">Total Amount</th>
                        <th style="width: 80px;">Edit</th>
                        <th style="width: 80px;">Delete</th>
                    </tr>
                </thead>
                <tbody id="entriesTableBody">
                    <tr id="noDataRow">
                        <td colspan="13" class="text-center text-muted py-4">No matching records found</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <!-- Total Amount Section -->
        <div class="bg-light p-3 border-top">
            <div class="row">
                <div class="col-md-8"></div>
                <div class="col-md-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <label class="form-label small mb-0 fw-bold">Total Amount</label>
                        <input type="text" class="form-control form-control-sm text-end" id="grandTotal" value="0.00" readonly style="max-width: 200px;">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer Buttons -->
    <div class="bg-white p-3 border-top">
        <button type="button" class="btn btn-sm btn-light border" id="saveBtn" disabled>
            <i class="fas fa-save"></i> Save
        </button>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let entries = [];
            let rowCounter = 0;

            // Calculate amounts
            $('#quantity, #rate, #exchangeRate').on('input', function () {
                calculateAmounts();
            });

            function calculateAmounts() {
                const quantity = parseFloat($('#quantity').val()) || 0;
                const rate = parseFloat($('#rate').val()) || 0;
                const exchangeRate = parseFloat($('#exchangeRate').val()) || 0;
                
                const amountIn = quantity * rate;
                const totalAmount = amountIn * exchangeRate;
                
                $('#amountIn').val(amountIn.toFixed(2));
                $('#totalAmount').val(totalAmount.toFixed(2));
            }

            // When Item is selected, fetch details
            $('#itemSelect').on('change', function () {
                const subItemCode = $(this).val();
                
                if (subItemCode) {
                    $('#itemCode').val(subItemCode);
                    const unit = $(this).find(':selected').data('unit');
                    $('#unit').val(unit);

                    $.ajax({
                        url: '@Url.Action("GetItemDetails", "StockDamage")',
                        type: 'GET',
                        data: { subItemCode: subItemCode },
                        success: function (response) {
                            if (response.success) {
                                $('#stock').val(response.data.stockQuantity.toFixed(2));
                            } else {
                                $('#stock').val('0.00');
                            }
                        },
                        error: function () {
                            $('#stock').val('0.00');
                        }
                    });
                } else {
                    $('#itemCode').val('');
                    $('#unit').val('');
                    $('#stock').val('');
                }
            });

            // When Currency is selected
            $('#currencySelect').on('change', function () {
                const rate = $(this).find(':selected').data('rate');
                $('#exchangeRate').val(rate || '0.00');
                calculateAmounts();
            });

            // Add button
            $('#addBtn').on('click', function () {
                if (!validateForm()) {
                    return;
                }

                const quantity = parseFloat($('#quantity').val());
                const rate = parseFloat($('#rate').val());
                const amountIn = parseFloat($('#amountIn').val());
                const exchangeRate = parseFloat($('#exchangeRate').val());
                const totalAmount = parseFloat($('#totalAmount').val());

                const entry = {
                    GodownNo: $('#godownSelect').val(),
                    GodownName: $('#godownSelect').find(':selected').data('name'),
                    SubItemCode: $('#itemCode').val(),
                    SubItemName: $('#itemSelect').find(':selected').data('name'),
                    Unit: $('#unit').val(),
                    Stock: parseFloat($('#stock').val()) || 0,
                    BatchNo: $('#batchNo').val(),
                    Quantity: quantity,
                    Rate: rate,
                    AmountIn: amountIn,
                    CurrencyName: $('#currencySelect').val(),
                    ConversionRate: exchangeRate,
                    TotalAmount: totalAmount,
                    DrAcHead: $('#drAcHead').val(),
                    EmployeeName: $('#employeeSelect').val(),
                    Comments: $('#comments').val()
                };

                console.log('Entry being added:', entry); // Debug log
                entries.push(entry);
                addRowToTable(entry);
                clearForm();
                $('#saveBtn').prop('disabled', false);
                updateTotalAmount();
            });

            function validateForm() {
                if (!$('#godownSelect').val()) {
                    alert('Please select a warehouse');
                    return false;
                }
                if (!$('#itemSelect').val()) {
                    alert('Please select an item');
                    return false;
                }
                if (!$('#currencySelect').val()) {
                    alert('Please select a currency');
                    return false;
                }
                if (!$('#employeeSelect').val()) {
                    alert('Please select an employee');
                    return false;
                }
                if (parseFloat($('#quantity').val()) <= 0) {
                    alert('Please enter a valid quantity');
                    return false;
                }
                if (parseFloat($('#rate').val()) <= 0) {
                    alert('Please enter a valid rate');
                    return false;
                }
                return true;
            }

            function addRowToTable(entry) {
                $('#noDataRow').hide();
                rowCounter++;

                const row = `
                    <tr data-index="${entries.length - 1}">
                        <td>${rowCounter}</td>
                        <td>${entry.GodownName}</td>
                        <td>${entry.SubItemName}</td>
                        <td>${entry.SubItemCode}</td>
                        <td>${entry.BatchNo}</td>
                        <td>${entry.CurrencyName}</td>
                        <td>${entry.Quantity.toFixed(2)}</td>
                        <td>${entry.Rate.toFixed(2)}</td>
                        <td>${entry.AmountIn.toFixed(2)}</td>
                        <td>${entry.ConversionRate.toFixed(2)}</td>
                        <td>${entry.TotalAmount.toFixed(2)}</td>
                        <td><button type="button" class="btn btn-edit btn-sm editBtn" data-index="${entries.length - 1}">Edit</button></td>
                        <td><button type="button" class="btn btn-delete btn-sm deleteBtn" data-index="${entries.length - 1}">Delete</button></td>
                    </tr>
                `;

                $('#entriesTableBody').append(row);
            }

            function updateTotalAmount() {
                let total = 0;
                entries.forEach(entry => {
                    total += parseFloat(entry.TotalAmount) || 0;
                });
                $('#grandTotal').val(total.toFixed(2));
            }

            // Delete row
            $(document).on('click', '.deleteBtn', function () {
                if (!confirm('Are you sure you want to delete this entry?')) {
                    return;
                }

                const index = $(this).data('index');
                entries.splice(index, 1);
                $(this).closest('tr').remove();

                // Re-index
                $('#entriesTableBody tr').each(function (i) {
                    if (!$(this).attr('id')) {
                        $(this).find('td:first').text(i + 1);
                        $(this).attr('data-index', i);
                        $(this).find('.editBtn').attr('data-index', i);
                        $(this).find('.deleteBtn').attr('data-index', i);
                    }
                });

                updateTotalAmount();

                if (entries.length === 0) {
                    $('#noDataRow').show();
                    $('#saveBtn').prop('disabled', true);
                    rowCounter = 0;
                    $('#grandTotal').val('0.00');
                }
            });

            function clearForm() {
                $('#itemSelect').val('');
                $('#itemCode').val('');
                $('#unit').val('');
                $('#stock').val('');
                $('#quantity').val('');
                $('#rate').val('');
                $('#amountIn').val('0.00');
                $('#totalAmount').val('0.00');
                $('#comments').val('');
            }

            // Save all
            $('#saveBtn').on('click', function () {
                if (entries.length === 0) {
                    alert('No entries to save');
                    return;
                }

                if (!confirm(`Save ${entries.length} entries?`)) {
                    return;
                }

                const saveBtn = $(this);
                saveBtn.prop('disabled', true);

                $.ajax({
                    url: '@Url.Action("SaveStockDamage", "StockDamage")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(entries),
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            entries = [];
                            $('#entriesTableBody').empty();
                            $('#noDataRow').show();
                            rowCounter = 0;
                            $('#grandTotal').val('0.00');
                        } else {
                            alert('Error: ' + response.message);
                            saveBtn.prop('disabled', false);
                        }
                    },
                    error: function (xhr) {
                        alert('Error: ' + (xhr.responseJSON?.message || 'Unknown error'));
                        saveBtn.prop('disabled', false);
                    }
                });
            });
        });
    </script>
}